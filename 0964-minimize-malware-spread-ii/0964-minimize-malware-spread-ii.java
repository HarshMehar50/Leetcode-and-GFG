class Solution {
    class DisjointSet{
        int[] parent;
        int[] rank;
        int[] size;
        public DisjointSet(int n){
            parent = new int[n];
            rank = new int[n];
            size = new int[n];
            for(int i = 0; i < n; i++){
                parent[i] = i;
                size[i] = 1;
            }
        }
        int findParent(int node){
            if(parent[node] == node){
                return node;
            }
            return parent[node] = findParent(parent[node]);
        }
        void unionSetRank(int u, int v){
            int up = findParent(u);
            int vp = findParent(v);
            if(up == vp)
                return;
            if(rank[up] < rank[vp]){
                parent[up] = vp;
            }else if(rank[vp] < rank[up]){
                parent[vp] = up;
            }else{
                parent[up] = vp;
                rank[vp]++;
            }
        }
        void unionSetSize(int u , int v){
            int up = findParent(u);
            int vp = findParent(v);
            if(up == vp)
                return;
            if(size[up] < size[vp]){
                parent[up] = vp;
                size[vp] = size[vp]+size[up];
            }else{
                parent[vp] = up;
                size[up] = size[up]+size[vp];
            }
        }
    }
    int solve(int[][] graph , int[] initial , int block){
        DisjointSet ds = new DisjointSet(graph.length);
        for(int i = 0; i < graph.length; i++){
            for(int j = i+1; j < graph[0].length; j++){
                if(graph[i][j] == 1 && i != block && j != block)
                ds.unionSetSize(i , j);
            }
        }
        Set<Integer> set = new HashSet<>();
        for(int i = 0; i < initial.length; i++){
            if(initial[i] != block)
            set.add(ds.findParent(initial[i]));
        }
        int ans = 0;
        for(Integer x : set){
            if(x != ds.findParent(block))
            ans += ds.size[x];
        }
        return graph.length-(ans+1);
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int maxSafe = Integer.MIN_VALUE;
        int ans = initial[0];
        for(int i = 0; i < initial.length; i++){
            int safe = solve(graph , initial , initial[i]);
            if(safe > maxSafe){
                maxSafe = safe;
                ans = initial[i];
            }
        }
        return ans;
    }
}